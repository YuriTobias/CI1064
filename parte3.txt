1 (Izalorran): Achei o desenvolvimento do trabalho realmente divertido e não acho que faria nada diferente.
Por um momento, me arrependi de não ter modularizado melhor os trechos de código que fiz, acreditando que isso
poderia dificultar as alterações sugeridas pelo docente, mas tal fato não se consumou e a alteração se deu sem
maiores problemas.

2 (Izalorran): Tive uma ótima experiência revisando o conteúdo da disciplina através dos vídeos antes da primeira
prova e sinto que a ausência de material gravado afetou um pouco negativamente minha compreensão do conteúdo na
segunda parte da disciplina. Ainda assim, o livro é muito bom e os slides são úteis. Senti um pouco de falta de
definições mais formais de alguns conceitos nos slides em trechos mais teóricos da disciplina, mas entendo que posso
buscá-los no livro. Fora isso, as aulas até aqui foram leves e divertidas e não tenho ressalvas a fazer.

1 (Yuri): Se eu pudesse voltar no tempo, primeiramente eu recomendaria que eu fizesse ao menos uma rápida revisão de 
assembly, ao menos das principais instruções como subq, addq, movq; isso com certeza já iria me poupar um tempo considerável
no início do desenvolvimento desse trabalho. Segundamente, eu diria pra eu ler e reler ao menos 10 vezes o enunciado porque 
apesar de ter lido bastante, no início ainda assim eu acabei tendo algumas interpretações equivocadas do que deveria ser 
feito e acabei não implementando o que deveria. Por fim, diria pra eu tomar cuidado com a implementação em C porque em 
particular no meu caso a mesma acabou não ajudando muito, quer dizer, ajudou bastante a entender o que deveria ser feito, 
mas na hora de passar pra assembly não foi tão relevante :D;

2 (Yuri): Sinceramente eu gosto bastante das aulas presenciais e também das gravadas. Além disso, achei a prova 1 muito bem 
formulada e o trabalho também, inclusive o último eu achei extremamente interessante para aumentar o grau de absorção do 
conteúdo inicial da disciplina. Nada a adicionar! Muito boa a disciplina!

3 Dado a forma como fizemos a implementação do alocador, a ideia foi adicionar mais duas variáveis locais na pilha, uma com o 
endereço do maior bloco livre e outra com o tamanho do maior bloco livre. Isso dito, a primeira alteração e a mais evidente é 
que em grande parte das operações ao invés de utilizarmos os valores do bloco atual para as comparações e alocações, a gente passou
a utilizar os valores do bloco livre de maior tamanho; isso dito, existem vários trechos que passaram de "-16(%rbp)" para "-40(%rbp)"
e de "-32(%rbp)" para "-48(%$rbp)". A segunda principal mudança é o fato de que ao invés de alocar assim que encontra o primeiro bloco
livre com tamanho apropriado, ele itera pela heap até chegar na brk, salvando nas duas novas variáveis os dados do maior bloco livre.
Essas alterações estão presentes nas linhas 115 - 119. Por fim, a última alteração relevante é que agora ele verifica, ao fim da iteração 
se existe espaço suficiente no maior bloco e só então faz a alocação ou redimensionamento da heap caso necessário. Essas alterações estão 
presentes nas linhas 128 - 135.